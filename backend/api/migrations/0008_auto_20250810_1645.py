# Generated by Django 4.2.7 on 2025-08-10 11:15

from django.db import migrations
from django.utils import timezone


def update_resume_based_data(apps, schema_editor):
    Skill = apps.get_model('api', 'Skill')
    Contact = apps.get_model('api', 'Contact')
    PersonalInfo = apps.get_model('api', 'PersonalInfo')
    
    # Clear existing skills and replace with resume-based skills
    Skill.objects.all().delete()
    
    # Resume-based skills organized by categories
    resume_skills = [
        # Programming Languages
        {'name': 'Python', 'category': 'programming', 'level': 95, 'icon': '🐍'},
        {'name': 'Java', 'category': 'programming', 'level': 85, 'icon': '☕'},
        {'name': 'C', 'category': 'programming', 'level': 80, 'icon': '⚙️'},
        {'name': 'JavaScript', 'category': 'programming', 'level': 90, 'icon': '⚡'},
        {'name': 'SQL', 'category': 'programming', 'level': 88, 'icon': '🗃️'},
        
        # Machine Learning & Data Science
        {'name': 'Scikit-learn', 'category': 'ml_ai', 'level': 92, 'icon': '📊'},
        {'name': 'Pandas', 'category': 'data_science', 'level': 95, 'icon': '🐼'},
        {'name': 'NumPy', 'category': 'data_science', 'level': 93, 'icon': '🔢'},
        {'name': 'Polars', 'category': 'data_science', 'level': 85, 'icon': '⚡'},
        {'name': 'Matplotlib', 'category': 'data_science', 'level': 88, 'icon': '📈'},
        {'name': 'Seaborn', 'category': 'data_science', 'level': 85, 'icon': '🌊'},
        {'name': 'Natural Language Processing', 'category': 'ml_ai', 'level': 85, 'icon': '💬'},
        
        # Deep Learning Frameworks
        {'name': 'TensorFlow', 'category': 'ml_ai', 'level': 90, 'icon': '🧠'},
        {'name': 'Keras', 'category': 'ml_ai', 'level': 88, 'icon': '🔥'},
        
        # Web Technologies & Automation
        {'name': 'Django', 'category': 'web_dev', 'level': 90, 'icon': '🎯'},
        {'name': 'React.js', 'category': 'web_dev', 'level': 92, 'icon': '⚛️'},
        {'name': 'Selenium', 'category': 'tools', 'level': 80, 'icon': '🤖'},
        {'name': 'Playwright', 'category': 'tools', 'level': 75, 'icon': '🎭'},
        {'name': 'REST APIs', 'category': 'web_dev', 'level': 90, 'icon': '🔗'},
        
        # Development Tools & Platforms
        {'name': 'Git', 'category': 'tools', 'level': 90, 'icon': '🔧'},
        {'name': 'GitHub', 'category': 'tools', 'level': 90, 'icon': '💻'},
        {'name': 'Jupyter Notebooks', 'category': 'data_science', 'level': 92, 'icon': '📔'},
        
        # Additional ML/AI Skills (from experience)
        {'name': 'XGBoost', 'category': 'ml_ai', 'level': 85, 'icon': '🚀'},
        {'name': 'Random Forest', 'category': 'ml_ai', 'level': 88, 'icon': '🌳'},
        {'name': 'BeautifulSoup', 'category': 'tools', 'level': 85, 'icon': '🥄'},
        {'name': 'Data Pipeline Development', 'category': 'data_science', 'level': 90, 'icon': '🔄'},
        {'name': 'Model Optimization', 'category': 'ml_ai', 'level': 87, 'icon': '⚡'},
        {'name': 'Predictive Analytics', 'category': 'data_science', 'level': 89, 'icon': '🔮'},
    ]
    
    for skill_data in resume_skills:
        Skill.objects.create(**skill_data)
    
    # Update contact information based on resume
    personal_info, created = PersonalInfo.objects.get_or_create(
        defaults={
            'name': 'Jenish Barvaliya',
            'title': 'AI/ML Engineer & Full-Stack Developer',
            'subtitle': 'Information Technology Student specializing in Machine Learning and Data Science',
            'location': 'Surat, Gujarat, India',
            'email': 'jenishbarvaliya2012@gmail.com',
            'phone': '+91 9510007247',
            'linkedin': 'https://linkedin.com/in/jenish-barvaliya-4b5312369',
            'github': 'https://github.com/jenish2917',
            'resume': '',
            'is_active': True
        }
    )
    
    # If personal info already exists, update it
    if not created:
        personal_info.name = 'Jenish Barvaliya'
        personal_info.title = 'AI/ML Engineer & Full-Stack Developer'
        personal_info.subtitle = 'Information Technology Student specializing in Machine Learning and Data Science'
        personal_info.location = 'Surat, Gujarat, India'
        personal_info.email = 'jenishbarvaliya2012@gmail.com'
        personal_info.phone = '+91 9510007247'
        personal_info.linkedin = 'https://linkedin.com/in/jenish-barvaliya-4b5312369'
        personal_info.github = 'https://github.com/jenish2917'
        personal_info.save()
    
    # Add more realistic contact messages based on your skills
    additional_contacts = [
        {
            'name': 'Dr. Rajesh Patel',
            'email': 'rajesh.patel@iitbombay.ac.in',
            'subject': 'Research Collaboration - NLP Project',
            'message': 'Hello Jenish, I came across your spam detection classifier project and was impressed by your 94% accuracy achievement. We have a research project on multilingual NLP that could benefit from your expertise. Would you be interested in collaborating?',
            'created_at': timezone.now() - timezone.timedelta(hours=12),
            'is_read': False
        },
        {
            'name': 'Priya Singh',
            'email': 'priya.singh@techstartup.in',
            'subject': 'Internship Opportunity - ML Engineer',
            'message': 'Hi Jenish, Your fantasy cricket predictor project caught our attention. We are building similar sports analytics solutions and looking for talented ML engineers. Your experience with ensemble learning and XGBoost aligns perfectly with our requirements.',
            'created_at': timezone.now() - timezone.timedelta(days=1),
            'is_read': False
        },
        {
            'name': 'Michael Johnson',
            'email': 'mjohnson@globaltech.com',
            'subject': 'International ML Engineer Position',
            'message': 'Dear Jenish, We are impressed by your comprehensive ML portfolio, especially your work with TensorFlow and data pipeline development. We have openings for international positions in our AI division. Your GPA of 9.34 and hands-on experience make you an ideal candidate.',
            'created_at': timezone.now() - timezone.timedelta(hours=8),
            'is_read': False
        },
        {
            'name': 'Ananya Sharma',
            'email': 'ananya@dataanalytics.co.in',
            'subject': 'Freelance Project - Movie Recommendation System',
            'message': 'Hello Jenish, I saw your movie recommendation system project on GitHub. We need similar collaborative filtering implementation for our e-commerce platform. The hybrid approach you developed with 85% accuracy is exactly what we are looking for.',
            'created_at': timezone.now() - timezone.timedelta(hours=3),
            'is_read': False
        }
    ]
    
    for contact_data in additional_contacts:
        Contact.objects.get_or_create(
            email=contact_data['email'],
            subject=contact_data['subject'],
            defaults=contact_data
        )


def reverse_update_resume_data(apps, schema_editor):
    # This function would restore the previous state
    pass


class Migration(migrations.Migration):
    dependencies = [
        ("api", "0007_auto_20250810_1644"),
    ]

    operations = [
        migrations.RunPython(update_resume_based_data, reverse_update_resume_data),
    ]
